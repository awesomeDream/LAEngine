game_data = [
  {
    'player': [403 * 4, 125 * 4, 10],
    'end': [334 * 4, 127 * 4],
    'wall': [[(323, 204), (404, 206), (361, 91)], [(403, 205), (424, 273), (538, 199)], [(421, 272), (363, 320), (468, 392)], [(363, 318), (312, 271), (263, 374)], [(312, 272), (324, 202), (218, 206)], [(339, 70), (180, 178), (217, 74)], [(383, 72), (582, 152), (536, 60)], [(591, 208), (505, 436), (619, 361)], [(255, 423), (465, 438), (367, 484)], [(165, 210), (219, 401), (121, 317)], [(160, 237), (205, 152), (158, 189)], [(207, 382), (273, 427), (219, 426)], [(416, 440), (522, 407), (496, 469)], [(563, 135), (585, 245), (627, 172)], [(307, 82), (351, 120), (412, 76)], [(370, 120), (312, 80), (428, 84)]],
    'red': [[(413, 212), (417, 173), (428, 210)], [(458, 101), (452, 123), (473, 102)], [(457, 208), (456, 171), (464, 202)], [(487, 211), (493, 170), (503, 209)], [(497, 106), (495, 138), (534, 118)], [(579, 188), (561, 183), (573, 179)], [(572, 266), (548, 264), (568, 287)], [(479, 226), (502, 259), (459, 232)], [(553, 307), (535, 314), (568, 336)], [(500, 424), (505, 393), (528, 409)], [(442, 332), (467, 324), (444, 344)], [(421, 440), (423, 422), (436, 446)], [(392, 437), (394, 428), (407, 439)], [(362, 436), (365, 428), (370, 441)], [(340, 434), (345, 418), (349, 436)], [(316, 432), (319, 415), (330, 439)], [(281, 429), (290, 416), (300, 434)], [(377, 326), (380, 408), (407, 327)], [(298, 332), (304, 396), (319, 323)], [(209, 376), (232, 377), (214, 393)], [(262, 237), (256, 261), (291, 242)], [(189, 310), (227, 312), (181, 330)], [(176, 197), (185, 230), (163, 231)], [(227, 209), (230, 197), (235, 214)], [(176, 269), (221, 245), (172, 285)], [(223, 142), (240, 162), (240, 124)], [(258, 210), (260, 177), (266, 207)], [(264, 111), (292, 170), (286, 94)], [(328, 197), (316, 158), (340, 172)]]
  },
  {
    'player': [44 * 4, 51 * 4, 4],
    'end': [731 * 4, 543 * 4],
    'wall':[[(7, 53), (8, 586), (743, 584)], [(48, 23), (768, 550), (775, 11)], [(10, 59), (66, 30), (14, 15)], [(749, 526), (724, 573), (775, 572)]],
    'red':[[(38, 84), (58, 76), (49, 87)], [(59, 96), (73, 91), (73, 107)], [(195, 125), (191, 141), (209, 141)], [(137, 81), (130, 93), (157, 90)], [(211, 217), (251, 207), (242, 233)], [(272, 253), (300, 251), (304, 272)], [(353, 310), (376, 306), (371, 332)], [(353, 232), (348, 252), (370, 249)], [(437, 374), (461, 367), (464, 393)], [(541, 373), (542, 402), (563, 396)], [(561, 460), (572, 453), (564, 465)], [(574, 466), (591, 456), (575, 468)], [(585, 476), (606, 459), (596, 483)], [(610, 492), (628, 471), (619, 497)], [(630, 505), (651, 491), (636, 515)], [(659, 523), (672, 523), (667, 534)], [(711, 502), (706, 530), (742, 517)], [(703, 564), (716, 548), (715, 563)]]
  },
  {
    'player': [158 * 4, 115 * 4, 10],
    'end': [213 * 4, 511 * 4],
    'wall': [[(144, 82), (118, 102), (198, 95)], [(127, 99), (111, 115), (124, 140)], [(183, 92), (188, 124), (201, 116)], [(128, 126), (109, 165), (132, 167)], [(190, 120), (189, 158), (211, 142)], [(124, 160), (111, 187), (135, 211)], [(196, 150), (186, 191), (211, 179)], [(196, 174), (215, 189), (220, 170)], [(197, 209), (187, 231), (218, 234)], [(217, 201), (199, 225), (227, 225)], [(218, 186), (220, 212), (235, 202)], [(213, 179), (225, 201), (242, 171)], [(197, 145), (200, 166), (245, 151)], [(122, 126), (125, 151), (100, 136)], [(119, 175), (101, 170), (112, 133)], [(124, 188), (127, 225), (93, 213)], [(117, 211), (79, 187), (111, 164)], [(113, 217), (130, 240), (91, 246)], [(115, 232), (127, 258), (94, 275)], [(109, 261), (83, 230), (101, 198)], [(206, 229), (218, 256), (244, 235)], [(123, 121), (111, 98), (151, 71)], [(171, 85), (179, 115), (211, 101)], [(111, 138), (79, 91), (152, 75)], [(124, 259), (140, 300), (178, 288)], [(245, 265), (232, 300), (275, 281)], [(229, 252), (227, 275), (258, 272)], [(216, 243), (208, 265), (235, 259)], [(231, 290), (205, 330), (243, 312)], [(216, 321), (180, 349), (219, 349)], [(137, 285), (118, 312), (149, 306)], [(133, 307), (115, 338), (139, 339)], [(124, 335), (109, 361), (141, 361)], [(126, 356), (105, 393), (163, 388)], [(198, 347), (182, 367), (224, 373)], [(205, 366), (209, 386), (248, 380)], [(133, 389), (129, 411), (175, 409)], [(131, 379), (104, 396), (137, 416)], [(106, 339), (89, 365), (140, 380)], [(112, 277), (94, 310), (128, 335)], [(113, 257), (89, 286), (132, 296)], [(225, 382), (218, 411), (248, 421)], [(148, 401), (121, 417), (161, 442)], [(139, 424), (118, 460), (147, 476)], [(232, 406), (239, 460), (297, 469)], [(144, 460), (143, 487), (169, 491)], [(254, 452), (246, 490), (321, 504)], [(151, 482), (117, 508), (154, 512)], [(264, 479), (257, 513), (298, 522)], [(144, 498), (116, 518), (155, 527)], [(268, 504), (250, 517), (305, 545)], [(248, 447), (217, 475), (267, 506)], [(147, 517), (128, 543), (186, 548)], [(260, 514), (239, 532), (302, 557)], [(167, 540), (156, 499), (134, 517)], [(174, 544), (200, 527), (214, 545)], [(204, 541), (228, 524), (252, 533)], [(205, 461), (196, 473), (231, 479)]],
    'red': [[(124, 178), (152, 192), (127, 195)], [(202, 225), (183, 247), (216, 247)], [(191, 342), (191, 323), (202, 338)], [(156, 404), (178, 398), (166, 408)], [(237, 435), (213, 444), (242, 450)], [(149, 511), (175, 505), (164, 531)]]
  },
  {
    'player': [535 * 4, 389 * 4, 10],
    'end': [472 * 4, 77 * 4],
    'wall': [[(470, 43), (457, 55), (500, 55)], [(471, 50), (452, 64), (449, 84)], [(485, 52), (504, 82), (517, 56)], [(506, 71), (513, 110), (539, 112)], [(518, 96), (530, 69), (505, 60)], [(453, 73), (453, 100), (441, 81)], [(448, 81), (437, 62), (465, 54)], [(449, 86), (453, 117), (436, 105)], [(518, 99), (518, 134), (544, 108)], [(527, 119), (523, 151), (551, 135)], [(519, 124), (515, 159), (542, 167)], [(527, 146), (525, 178), (553, 157)], [(523, 154), (520, 187), (553, 194)], [(530, 183), (521, 218), (550, 177)], [(534, 198), (520, 235), (552, 223)], [(526, 178), (533, 220), (516, 222)], [(530, 223), (525, 255), (568, 254)], [(534, 245), (528, 275), (513, 275)], [(523, 228), (498, 250), (526, 251)], [(521, 238), (524, 268), (546, 250)], [(445, 108), (449, 148), (434, 141)], [(443, 129), (433, 114), (449, 102)], [(438, 140), (444, 157), (424, 156)], [(435, 151), (451, 174), (430, 173)], [(440, 165), (435, 195), (415, 185)], [(424, 184), (418, 160), (443, 143)], [(429, 152), (415, 132), (446, 125)], [(430, 188), (439, 204), (415, 208)], [(433, 199), (441, 171), (446, 195)], [(428, 202), (410, 198), (426, 164)], [(422, 198), (429, 225), (438, 198)], [(432, 208), (413, 231), (431, 231)], [(425, 225), (409, 247), (432, 247)], [(424, 241), (429, 265), (438, 234)], [(437, 202), (443, 242), (427, 242)], [(435, 235), (440, 260), (420, 267)], [(426, 253), (421, 280), (447, 274)], [(438, 251), (428, 271), (450, 285)], [(436, 273), (428, 298), (449, 298)], [(447, 280), (450, 314), (433, 301)], [(446, 303), (436, 328), (465, 331)], [(437, 289), (424, 308), (456, 321)], [(525, 270), (518, 299), (539, 292)], [(529, 287), (530, 311), (541, 308)], [(533, 289), (546, 304), (547, 247)], [(533, 253), (544, 286), (525, 288)], [(533, 299), (518, 319), (541, 321)], [(457, 327), (474, 357), (443, 352)], [(438, 325), (438, 344), (463, 347)], [(425, 287), (414, 317), (457, 333)], [(411, 226), (380, 274), (427, 313)], [(431, 151), (378, 197), (422, 245)], [(443, 80), (401, 119), (420, 180)], [(479, 53), (553, 36), (537, 112)], [(467, 47), (422, 107), (395, 18)], [(439, 41), (488, 22), (524, 61)], [(539, 92), (529, 155), (587, 157)], [(547, 145), (536, 201), (581, 211)], [(542, 204), (552, 264), (589, 253)], [(549, 251), (545, 277), (589, 299)], [(542, 294), (530, 315), (576, 325)], [(541, 314), (540, 352), (580, 367)], [(448, 344), (443, 378), (497, 378)], [(472, 372), (467, 399), (532, 411)], [(552, 355), (555, 388), (651, 402)], [(484, 395), (516, 419), (603, 412)], [(559, 415), (586, 386), (587, 419)], [(468, 373), (457, 398), (518, 411)], [(451, 374), (439, 396), (502, 391)], [(579, 349), (564, 392), (620, 395)], [(578, 379), (551, 414), (654, 409)], [(561, 313), (545, 333), (605, 374)], [(580, 280), (546, 298), (583, 358)], [(567, 251), (535, 289), (575, 332)], [(449, 226), (441, 193), (426, 228)]],
    'red': [[(477, 367), (506, 354), (481, 375)], [(524, 312), (504, 322), (538, 317)], [(440, 288), (476, 288), (446, 301)], [(505, 247), (494, 262), (516, 247)], [(447, 221), (468, 228), (441, 234)], [(520, 197), (502, 199), (531, 213)], [(441, 163), (473, 166), (437, 182)], [(517, 127), (497, 132), (527, 139)], [(446, 103), (464, 108), (442, 118)], [(509, 87), (495, 99), (520, 89)]]
  },
  
  {
    'player': [370, 2110, 10],
    'end': [2600, 2150],
    'wall': [[(41, 514), (50, 571), (25, 578)], [(36, 569), (65, 586), (71, 567)], [(63, 577), (79, 585), (88, 572)], [(81, 579), (105, 588), (107, 579)], [(102, 582), (110, 572), (124, 583)], [(119, 579), (128, 591), (147, 575)], [(136, 579), (149, 593), (161, 581)], [(152, 588), (165, 571), (177, 584)], [(132, 581), (137, 563), (167, 575)], [(39, 527), (65, 530), (78, 509)], [(66, 516), (84, 531), (105, 518)], [(93, 523), (132, 509), (128, 528)], [(127, 521), (139, 540), (163, 522)], [(147, 530), (158, 507), (180, 520)], [(172, 520), (187, 530), (207, 519)], [(193, 522), (212, 533), (234, 523)], [(218, 528), (246, 536), (258, 527)], [(171, 585), (196, 573), (211, 583)], [(202, 580), (235, 571), (239, 590)], [(230, 582), (266, 576), (274, 593)], [(262, 587), (284, 567), (291, 582)], [(249, 532), (272, 502), (251, 493)], [(284, 578), (316, 564), (319, 581)], [(310, 575), (321, 542), (334, 562)], [(322, 554), (321, 519), (345, 513)], [(326, 523), (323, 498), (335, 484)], [(338, 520), (333, 493), (322, 527)], [(330, 487), (317, 450), (297, 466)], [(326, 495), (320, 463), (339, 463)], [(310, 460), (310, 420), (273, 429)], [(295, 433), (227, 436), (232, 404)], [(256, 499), (217, 491), (226, 470)], [(223, 483), (180, 475), (177, 492)], [(241, 417), (193, 392), (187, 418)], [(192, 445), (183, 454), (204, 457)], [(187, 480), (160, 465), (149, 478)], [(194, 406), (165, 395), (152, 423)], [(156, 472), (134, 465), (120, 479)], [(132, 472), (89, 460), (85, 476)], [(89, 469), (74, 438), (103, 417)], [(163, 402), (141, 390), (175, 378)], [(94, 426), (69, 411), (108, 401)], [(79, 443), (58, 463), (85, 484)], [(93, 467), (84, 501), (112, 501)], [(133, 470), (110, 501), (144, 502)], [(129, 493), (89, 491), (94, 470)], [(159, 477), (135, 491), (176, 501)], [(190, 487), (160, 500), (214, 500)], [(147, 471), (128, 478), (196, 497)], [(223, 487), (191, 499), (250, 517)], [(172, 518), (111, 517), (115, 495)], [(89, 524), (42, 521), (60, 491)], [(88, 410), (52, 382), (91, 345)], [(155, 388), (141, 360), (170, 337)], [(79, 365), (65, 336), (95, 316)], [(157, 360), (147, 321), (182, 304)], [(77, 325), (54, 285), (110, 276)], [(78, 292), (50, 327), (72, 366)], [(164, 321), (151, 288), (194, 285)], [(178, 293), (207, 355), (173, 355)], [(192, 340), (152, 368), (180, 395)], [(168, 376), (219, 411), (238, 364)], [(94, 285), (75, 253), (115, 235)], [(174, 289), (199, 266), (209, 305)], [(101, 242), (91, 214), (132, 198)], [(104, 207), (107, 161), (153, 169)], [(119, 211), (123, 171), (162, 188)], [(193, 279), (188, 235), (236, 236)], [(145, 187), (188, 188), (187, 157)], [(138, 164), (190, 150), (202, 177)], [(192, 168), (239, 162), (251, 185)], [(180, 162), (214, 126), (236, 169)], [(123, 174), (132, 141), (203, 158)], [(241, 175), (279, 159), (279, 124)], [(224, 143), (272, 157), (229, 172)], [(220, 246), (252, 265), (280, 217)], [(271, 232), (310, 243), (325, 216)], [(313, 235), (341, 241), (355, 209)], [(312, 229), (313, 249), (349, 232)], [(256, 259), (308, 271), (308, 231)], [(251, 251), (191, 256), (189, 288)], [(196, 296), (219, 345), (199, 347)], [(206, 344), (195, 384), (233, 382)], [(274, 146), (328, 122), (288, 103), (254, 129)], [(308, 117), (346, 106), (361, 136)], [(345, 227), (388, 195), (402, 232)], [(384, 217), (414, 164), (423, 201)], [(393, 219), (423, 228), (408, 187)], [(417, 214), (434, 198), (446, 218)], [(347, 121), (365, 89), (365, 115)], [(362, 104), (388, 132), (410, 106)], [(399, 113), (427, 129), (449, 112)], [(436, 212), (468, 192), (479, 219)], [(464, 203), (492, 180), (506, 216)], [(438, 117), (462, 142), (475, 106)], [(463, 120), (508, 128), (519, 106)], [(499, 119), (511, 149), (534, 129)], [(511, 137), (527, 159), (547, 146)], [(534, 151), (538, 170), (586, 168)], [(554, 164), (571, 177), (604, 170)], [(595, 172), (604, 192), (631, 189)], [(616, 188), (617, 213), (641, 213)], [(629, 205), (638, 235), (650, 233)], [(643, 235), (639, 268), (683, 268)], [(657, 258), (645, 281), (696, 283)], [(491, 210), (510, 273), (455, 223)], [(480, 243), (487, 288), (532, 288)], [(511, 283), (489, 309), (537, 315)], [(520, 309), (522, 340), (550, 334)], [(535, 334), (526, 364), (556, 363)], [(671, 276), (640, 301), (670, 321)], [(655, 311), (645, 343), (683, 347)], [(658, 335), (654, 357), (681, 356)], [(567, 219), (541, 235), (581, 245)], [(558, 234), (552, 263), (594, 272)], [(578, 266), (566, 284), (603, 294)], [(590, 288), (575, 309), (605, 318)], [(590, 310), (583, 333), (612, 339)], [(665, 348), (647, 380), (679, 392)], [(668, 384), (648, 401), (685, 409)], [(550, 361), (530, 394), (572, 397)], [(561, 392), (549, 423), (593, 424)], [(562, 411), (551, 478), (578, 506)], [(665, 402), (639, 496), (679, 480)], [(609, 456), (602, 473), (624, 476)], [(558, 487), (557, 541), (584, 531)], [(659, 474), (626, 520), (673, 523)], [(669, 467), (653, 504), (690, 507)], [(567, 476), (534, 499), (563, 515)], [(566, 531), (558, 550), (580, 553)], [(571, 545), (556, 573), (584, 576)], [(573, 565), (558, 548), (562, 533)], [(571, 568), (598, 567), (598, 581)], [(592, 574), (618, 562), (617, 577)], [(605, 572), (646, 565), (650, 577)], [(643, 571), (658, 558), (672, 576)], [(664, 512), (685, 537), (705, 526)], [(694, 526), (697, 557), (662, 568)], [(665, 574), (700, 589), (690, 555)]],
    'red': [[(181, 524), (185, 544), (199, 526)], [(141, 572), (120, 567), (124, 581)], [(223, 581), (230, 565), (241, 582)], [(261, 502), (283, 511), (257, 512)], [(327, 506), (308, 510), (330, 521)], [(244, 425), (249, 456), (273, 429)], [(193, 451), (212, 440), (198, 454)], [(161, 412), (161, 439), (179, 408)], [(100, 470), (113, 443), (111, 471)], [(84, 328), (121, 334), (82, 350)], [(103, 255), (127, 271), (113, 240)], [(204, 245), (209, 214), (221, 241)], [(144, 187), (156, 218), (170, 177)], [(347, 128), (357, 155), (353, 127)], [(372, 209), (371, 188), (381, 214)], [(305, 224), (308, 190), (322, 227)], [(449, 119), (442, 153), (462, 125)], [(572, 256), (603, 250), (584, 277)], [(592, 328), (574, 349), (607, 335)], [(658, 376), (625, 382), (664, 367)], [(612, 465), (628, 456), (613, 470)], [(587, 571), (600, 553), (602, 569)], [(606, 568), (616, 553), (621, 572)]]
  }
]



from collision import SAT
from mathlib import Vector2D
from shape import Polygon, Circle, Rect
from quadtree import QuadTree
from camera import Camera

import math

def dist(p1, p2, center):
  q = p2 - p1
  
  a = q.y
  b = -q.x
  c = -p1.x * q.y + p1.y * q.x
  
  return abs(center.x * a + center.y * b + c) / math.sqrt(a * a + b * b)

class Game:
  def __init__(self, pygame, screen, width, height, stage):
    self.pygame = pygame
    self.screen = screen
    self.width = width
    self.height = height
    self.stage = stage
    
    # game init
    
    self.load_game(stage, width, height)

  def load_game(self, stage, width, height):
    
    data = game_data[stage]
    
    self.walls = []
    self.reds = []
    self.walls_qt = QuadTree(Rect(0, 0, self.width * 4, self.height * 4))
    self.reds_qt = QuadTree(Rect(0, 0, self.width * 4, self.height * 4))
    
    self.end_point = Polygon(Vector2D(data['end'][0], data['end'][1]), [Vector2D(20, 0), Vector2D(0, -20), Vector2D(-20, 0), Vector2D(0, 20)])
    
    self.player = Circle(Vector2D(data['player'][0], data['player'][1]), data['player'][2])
    self.velocity = Vector2D(0, 0)
    self.circles = []
    
    self.camera = Camera(width, height)
    self.camera.setTarget(self.player)
    
    
    for i in data['wall']:
      # center
      a = Vector2D(i[0][0], i[0][1]) * 4
      b = Vector2D(i[1][0], i[1][1]) * 4
      c = Vector2D(i[2][0], i[2][1]) * 4
  
      center = (a + b + c) / 3
  
      self.walls.append(Polygon(center, [a - center, b - center, c - center]))

    for i in data['red']:
      # center
      a = Vector2D(i[0][0], i[0][1]) * 4
      b = Vector2D(i[1][0], i[1][1]) * 4
      c = Vector2D(i[2][0], i[2][1]) * 4
  
      center = (a + b + c) / 3
  
      self.reds.append(Polygon(center, [a - center, b - center, c - center]))

    for i in self.walls:
      self.walls_qt.insert(i)

    for i in self.reds:
      self.reds_qt.insert(i)

  def update(self, keys = False):
    if not keys == False:
    
      if keys[self.pygame.K_a]:
        self.velocity = Vector2D(-1, -4)
        self.circles.append(Circle(self.player.pos.copy(), 1))
    
      if keys[self.pygame.K_d]:
        self.velocity = Vector2D(1, -4)
        self.circles.append(Circle(self.player.pos.copy(), 1))
        
    # update player
    
    self.velocity += Vector2D(0, 0.1)
    self.player.pos += self.velocity
    
    wall_check_list = []
    self.walls_qt.search(self.player.getRect(), wall_check_list)
  
    red_check_list = []
    self.reds_qt.search(self.player.getRect(), red_check_list)
    
    for check in wall_check_list:
      collid, mtv = SAT(self.player, check)
      
      if collid:
        self.player.pos += mtv
        self.velocity = Vector2D(0, 0)
    
    for check in red_check_list:
      collid, mtv = SAT(self.player, check)
    
      # game end
      if collid: return "You failed stage " + str(self.stage + 1) + " :("
    
    collid, mtv = SAT(self.player, self.end_point)
    if collid: return "You succeeded stage " + str(self.stage + 1) + " :)"

    # update echoes

    for circle in self.circles:
      circle.radius += 3
    
    self.circles = list(filter(lambda c: c.radius < 255, self.circles))
    self.circles.sort(key = lambda c: c.radius, reverse = True)

    return ""
  
  def draw(self):
    self.screen.fill((0, 0, 0))
      
    # draw player
    self.player.draw(self.screen, self.camera, (0, 255, 0))
    
    # draw circles 
    for circle in self.circles:
      color = (255 - circle.radius, 255 - circle.radius, 255 - circle.radius)
    
      circle_list = []
      self.walls_qt.search(circle.getRect(), circle_list)

      for c in circle_list:
        for p in self.echo_polygon(c, circle, color):
          self.drawCircle(color, p)


      color = (255 - circle.radius, 0, 0)
        
      circle_list = []
      self.reds_qt.search(circle.getRect(), circle_list)

      for c in circle_list:
        for p in self.echo_polygon(c, circle, color):
          self.drawCircle(color, p)

      color = (255 - circle.radius, 255 - circle.radius, 0)
      for p in self.echo_polygon(self.end_point, circle, color):
        self.drawCircle(color, p)

      circle.draw(self.screen, self.camera, (255 - circle.radius, 255 - circle.radius, 255 - circle.radius))
    
  def drawLine(self, color, s, e):
    self.pygame.draw.line(self.screen, color, (s - self.camera.padding()).toTuple(), (e - self.camera.padding()).toTuple())
  
  def drawCircle(self, color, pos, radius = 3):
    self.pygame.draw.circle(self.screen, color, (pos - self.camera.padding()).toTuple(), radius)

  def echo_polygon(self, polygon, circle, color):
    points = [v + polygon.pos for v in polygon.rotated]
    
    ret_points = []
    inside = [False] * len(points)
    
    for i in range(len(inside)):
      diff = points[i] - circle.pos
      if diff.x * diff.x + diff.y * diff.y < circle.radius * circle.radius:
        inside[i] = True
        
    for i in range(len(points)):
      j = i + 1
      if j >= len(points): j = 0
      
      if inside[i] and inside[j]:
        self.drawLine(color, points[i], points[j])
        continue
      
      if dist(points[i], points[j], circle.pos) + 0.1 > circle.radius:
        continue
      
      # can calculate t value
      
      K = points[j] - points[i]
      P = points[i] - circle.pos
      
      a = K.x * K.x + K.y * K.y
      b = P.x * K.x + P.y * K.y
      c = P.x * P.x + P.y * P.y - circle.radius * circle.radius
      
      t1 = (-math.sqrt(b * b - a * c) - b) / a
      t2 = ( math.sqrt(b * b - a * c) - b) / a
      
      t1_in = 0 <= t1 and t1 <= 1
      t2_in = 0 <= t2 and t2 <= 1
      
      p1 = points[i] + (points[j] - points[i]) * t1
      p2 = points[i] + (points[j] - points[i]) * t2
      
      inside_p = p1
      if t2_in: inside_p = p2
      
      if inside[i] or inside[j]:
        inside_index = i
        if inside[j]: inside_index = j
        
        self.drawLine(color, points[inside_index], inside_p)
        ret_points.append(inside_p)
        
        continue
        
      if t1_in and t2_in:
        self.drawLine(color, p1, p2)
        ret_points.append(p1)
        ret_points.append(p2)
      
    return ret_points 